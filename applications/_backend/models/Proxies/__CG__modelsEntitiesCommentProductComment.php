<?php

namespace Proxies\__CG__\models\Entities\Comment;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ProductComment extends \models\Entities\Comment\ProductComment implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setProduct($value)
    {
        $this->__load();
        return parent::setProduct($value);
    }

    public function getProduct()
    {
        $this->__load();
        return parent::getProduct();
    }

    public function getRecord()
    {
        $this->__load();
        return parent::getRecord();
    }

    public function getID()
    {
        $this->__load();
        return parent::getID();
    }

    public function setUserName($value)
    {
        $this->__load();
        return parent::setUserName($value);
    }

    public function getUserName()
    {
        $this->__load();
        return parent::getUserName();
    }

    public function getUserAvatar()
    {
        $this->__load();
        return parent::getUserAvatar();
    }

    public function setMessage($value)
    {
        $this->__load();
        return parent::setMessage($value);
    }

    public function getMessage()
    {
        $this->__load();
        return parent::getMessage();
    }

    public function setDate()
    {
        $this->__load();
        return parent::setDate();
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function setStatus($value)
    {
        $this->__load();
        return parent::setStatus($value);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setUser(\models\Entities\User\Customer\Personal $value)
    {
        $this->__load();
        return parent::setUser($value);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setResponse(\models\Entities\Comment\Response $value)
    {
        $this->__load();
        return parent::setResponse($value);
    }

    public function getResponses()
    {
        $this->__load();
        return parent::getResponses();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'user_name', 'message', 'date', 'status', 'user', 'responses', 'product', 'record');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}