<?php

namespace Proxies\__CG__\models\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Benchmark extends \models\Entities\Benchmark implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setID($value)
    {
        $this->__load();
        return parent::setID($value);
    }

    public function getID()
    {
        $this->__load();
        return parent::getID();
    }

    public function setTitle($value)
    {
        $this->__load();
        return parent::setTitle($value);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setShortInfo($value)
    {
        $this->__load();
        return parent::setShortInfo($value);
    }

    public function getShortInfo()
    {
        $this->__load();
        return parent::getShortInfo();
    }

    public function setDescription($value)
    {
        $this->__load();
        return parent::setDescription($value);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setCategory($value)
    {
        $this->__load();
        return parent::setCategory($value);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function setProduct($value)
    {
        $this->__load();
        return parent::setProduct($value);
    }

    public function getProduct()
    {
        $this->__load();
        return parent::getProduct();
    }

    public function setDate($value)
    {
        $this->__load();
        return parent::setDate($value);
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function getFormatedDate()
    {
        $this->__load();
        return parent::getFormatedDate();
    }

    public function setThumb($value)
    {
        $this->__load();
        return parent::setThumb($value);
    }

    public function getThumb()
    {
        $this->__load();
        return parent::getThumb();
    }

    public function getThumbURL()
    {
        $this->__load();
        return parent::getThumbURL();
    }

    public function setStatus($value)
    {
        $this->__load();
        return parent::setStatus($value);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setImage(\models\Entities\Benchmark\Image $value)
    {
        $this->__load();
        return parent::setImage($value);
    }

    public function getImages()
    {
        $this->__load();
        return parent::getImages();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'short_info', 'description', 'benchmark_date', 'thumb', 'status', 'category', 'product', 'images');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}